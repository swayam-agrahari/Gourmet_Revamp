// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Seller
}

enum Availability {
  Available
  Out_of_stock
}

enum Order_Status {
  cancelled
  pending
  shipped
  delivered
  returned
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(User)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Shop {
  id            String     @id @default(uuid())
  name          String
  address       String
  rating        Float
  contact_info  String
  isActive      Boolean
  products      Product[]
  ShopKeeper    ShopKeeper @relation(fields: [Shopkeeper_id], references: [shopkeeper_id])
  Shopkeeper_id String
}

model ShopKeeper {
  shopkeeper_id String @id @default(uuid())
  name          String
  password      String
  contact_info  String
  managed_shops Int
  shops         Shop[]
  role          Role   @default(Seller)
}

model Product {
  pid         String       @id @default(uuid())
  name        String
  description String
  category    String
  price       Float
  image       String
  status      Availability
  Shop        Shop         @relation(fields: [shopId], references: [id])
  shopId      String
  OrderItems  OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  Order     Order   @relation(fields: [OrderId], references: [order_id])
  OrderId   String
  Product   Product @relation(fields: [ProductId], references: [pid])
  ProductId String
}

model Order {
  order_id     String       @id @default(uuid())
  total_amount Float
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  status       Order_Status
  User         User         @relation(fields: [userId], references: [id])
  userId       String
  items        OrderItem[]
}
